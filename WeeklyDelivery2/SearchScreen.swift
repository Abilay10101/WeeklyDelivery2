//
//  SearchScreen.swift
//  WeeklyDelivery2
//
//  Created by Arip Khozhbanov on 18.05.2023.
//

import SwiftUI

struct Cat: Identifiable {
    let id = UUID()
    let name: String
    let emg: String
}

struct SearchScreen: View {
    
    @EnvironmentObject var db : ImmitationOfDB
    @EnvironmentObject var user : User
    @State var inCatViewIsOn: Bool = false
    @State var showRootView: Bool = false
    @State var catName: String = ""
    @State private var searchText = ""
        
    let products = [
        Cat(name: "–°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã", emg: "üçè"),
        Cat(name: "–ù–∞–ø–∏—Ç–∫–∏" , emg: "ü•§"),
        Cat(name: "–ú–æ–ª–æ–∫–æ, —Å—ã—Ä, –º–∞—Å–ª–æ, —è–π—Ü–∞", emg: "ü•õ"),
        Cat(name: "–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã", emg: "üç§"),
        Cat(name: "–ö—É–ª–∏–Ω–∞—Ä–∏—è" , emg: "ü•ò"),
        Cat(name: "–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –ª–∞–≤–∫–∞", emg: "ü•î"),
        Cat(name: "–ú—è—Å–æ, –ø—Ç–∏—Ü–∞", emg: "ü•©"),
        Cat(name: "–ê–ª–∫–æ–≥–æ–ª—å" , emg: "ü•É"),
        Cat(name: "–•–ª–µ–±, –≤—ã–ø–µ—á–∫–∞", emg: "üçû"),
        Cat(name: "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã" , emg: "üçß"),
    ]
    
    var filteredProducts: [Cat] {
            if searchText.isEmpty {
                return products
            } else {
                return products.filter {
                    $0.name.lowercased().contains(searchText.lowercased()) }
        }
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack {
                    SearchBar(text: $searchText)
                    ForEach(filteredProducts) { product in
                        NavigationLink(isActive: $inCatViewIsOn) {
                            InCategoryScreen(catName: $catName)
                        } label: {
                            HStack {
                                Text(product.emg)
                                    .padding(.leading)
                                    .font(.system(size: 35))
                                    
                                Text(product.name)
                                    .font(.system(size: 18))
                                    .foregroundColor(.black)
                                Spacer()
                                Image(systemName: "chevron.forward")
                                    .padding()
                                    .foregroundColor(.black)
                            }.onTapGesture {
                                catName = product.name
                                inCatViewIsOn.toggle()
                            }
                        }
                    }
                }
            }
        }
    }
}

struct SearchBar: View {
    @Binding var text: String
    
    var body: some View {
        HStack {
            Image(systemName: "magnifyingglass")
            TextField("–ò—Å–∫–∞—Ç—å –Ω–∞ –ê—Ä–±—É–∑–µ", text: $text)
                .foregroundColor(.primary)
        }
        .padding(8)
        .background(Color(.systemGray6))
        .cornerRadius(10)
        .padding(.horizontal)
    }
}


struct SearchScreen_Previews: PreviewProvider {
    static var previews: some View {
        SearchScreen()
    }
}
